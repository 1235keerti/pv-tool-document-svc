service: ${env:APP_NAME}-document-microservice

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  envName: ${self:provider.stage}
  bundle:
    linting: false
    excludeFiles: "**/*.test.ts"
    tsConfig: tsconfig.special.json
    forceInclude:
      - swagger-ui-dist
    externals:
      - swagger-ui-dist

    copyFiles: # Copy documentation html file
      - from: "src/public/*"
        to: "./"

  packager: yarn
  packagerOptions:
    noFrozenLockFile: true
    scripts:
      - rm -rf node_modules/sharp
      - npm install --arch=x64 --platform=linux sharp
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    noPrependStageInUrl: true

  # Localstack for local testing (mock aws services).
  # command to deploy : sls deploy --stage local
  localstack:
    stages:
      - local
    host: http://localhost # optional - LocalStack host to connect to
    debug: true
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: true # optional - Start LocalStack in Docker on Serverless deploy
    # lambda: # have issue with handlers paths, therefore not using this feature
    #   mountCode: true  # specify either "true", or a relative path to the root Lambda mount path
    networks: #optional - attaches the list of networks to the localstack docker container after startup
      - host
      - overlay
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
      compose_file: ./localstack-compose.yml # optional to use docker compose instead of docker or localstack cli

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage}
  memorySize: 256
  logRetentionInDays: ${env:LOG_RETENTION}
  role: DocumentOptRole
  logs:
    httpApi: true
  environment:
    ENV_APP_NAME: ${self:custom.envName}
    BUCKET: ${env:BUCKET_NAME}
    AWS_SECRET_NAME: ${env:AWS_SECRET_NAME}

functions:
  app:
    enabled: '"${env:IS_DOCKER_DEPLOYMENT}" != "true"'
    handler: src/handler.handler
    maximumRetryAttempts: ${env:MAXIMUM_RETRY}
    reservedConcurrency: ${env:RESERVED_CONCURRENCY}
    timeout: 120
    environment:
      ZIP_PROCESSOR_FUNCTION: ${self:service}-${self:provider.stage}-processZip
    events:
      - httpApi:
          path: /{proxy+}
          method: "*"

  generateBlurHash:
    name: ${env:APP_NAME}-generateBlurHash-${self:provider.stage}
    description: generate blur hash
    handler: src/handlers/blurHash.generateBlurHash
    memorySize: 256
    timeout: 30
    maximumRetryAttempts: ${env:MAXIMUM_RETRY}
    reservedConcurrency: ${env:RESERVED_CONCURRENCY}
    layers:
      - !Ref SharpLambdaLayer
    events:
      - s3:
          bucket: ${env:BUCKET_NAME}
          event: s3:ObjectCreated:*
          existing: '"${env:EXISTING_BUCKET}" == "true"'
          rules: ${file(./blurhash-event-rules.yml):rules}

  processZip:
    handler: src/handlers/zipProcessor.processZip
    timeout: 900 # 15 minutes
    memorySize: 256
    environment:
      BUCKET_NAME: ${env:BUCKET_NAME}

resources:
  Resources:
    DocumentOptRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-S3-AND-LOGS-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-s3-and-log-access-${self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - "*"
                  Resource:
                    - "arn:aws:s3:::${self:provider.environment.BUCKET}/*"
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-processZip"
                    # Note: change this opt:region to aws:region for localstack
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource:
                    - "arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:${self:provider.environment.AWS_SECRET_NAME}*"
package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-bundle
  - serverless-offline
  - serverless-tscpaths
  - serverless-plugin-conditional-functions
  - serverless-localstack

layers:
  sharp:
    package:
      artifact: ./sharp-x64.zip
